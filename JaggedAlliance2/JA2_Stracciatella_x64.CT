<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>89</ID>
      <Description>"Init - run this FIRST within the Battle Screen !"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}

---------------------------------------------------------
-- JA2 Cheat Engine Table                              --
-- Created by CrazyGerry (agehring80)                  --
--                                                     --
-- Version Label: Stracciatella v0.21.0-git+61938e1    --
-- Version #:     Build 04.12.02                       --
-- ja2-stracciatella_0.21.0-git+61938e1_win-msvc64-142 --
--                                                     --
---------------------------------------------------------

-- HotKey Exchange Things
-- HotKey to hand, only if hand is empty or other HotKey stuff is in hand
exchangeItems = {0,36,41,61,51,54,247,138,133,202,65,204,222,242,247}

function has_value (tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return true
        end
    end
    return false
end

-- Init Items
itmClear = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
itmHK21 = {36,0,1,0,100,2,20,0,101,0,100,0,0,0,0,0,241,0,54,1,50,0,147,0,100,100,100,100,0,0,0,0,126,0,0,0}
itmARRifle = {65,0,1,0,100,10,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,11,0,0,0}
itmMortar = {41,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0}
itmLAW = {51,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} --empty LAW = 247
itmHMX = {138,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,242,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} --Detonator to hand 2
itmMustardGasGrenade = {133,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
itmLockSmith = {204,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
itmBooster = {222,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
itmMedKit = {202,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
itmTranquilizerDart = {61,0,1,0,100,11,100,0,114,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,61,0,1,0,100,11,100,0,114,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0} --2 DartGun
itmMachete = {54,0,1,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

-- init arrays
addrID = {}
addrName = {}
addrPersonID = {}
addrTeam = {}
addrMaxHealth = {}
addrHealth = {}
addrMaxEnergy = {}
addrEnergy = {}
addrMorale = {}
addrAgility = {}
addrDexterity = {}
addrStrength = {}
addrLeadership = {}
addrWisdom = {}
addrMarksmanship = {}
addrExplosives = {}
addrMechanical = {}
addrMedical = {}
addrLevel = {}
addrCamouflage = {}
addrBleeding = {}

addrHead1 = {}
addrHead2 = {}
addrHand1 = {}
addrHand2 = {}
addrHelmet = {}
addrVest = {}
addrLeg = {}
addrSmPock1 = {}
addrSmPock2 = {}
addrSmPock3 = {}
addrSmPock4 = {}
addrSmPock5 = {}
addrSmPock6 = {}
addrSmPock7 = {}
addrSmPock8 = {}
addrBigPock1 = {}
addrBigPock2 = {}
addrBigPock3 = {}
addrBigPock4 = {}

--// ENUMERATION OF SOLDIER POSIITONS IN GLOBAL SOLDIER LIST
--#define MAX_NUM_SOLDIERS				148
--#define NUM_PLANNING_MERCS			8 // XXX this is a remnant of the planning mode, see issue #902
--#define TOTAL_SOLDIERS				( NUM_PLANNING_MERCS + MAX_NUM_SOLDIERS )
totalSoldiers = 156

-- Init Team+TeamMates addresses
ja2 = getAddress("ja2.exe") -- base address
activatedSoldierIDPointer = ja2+0xCAF428
firstSoldierAddr = activatedSoldierIDPointer+0x4F8
soldierOffset = 0xA00

-- fill all player addresses
for i=1, totalSoldiers do
  --o----------o                         o----------o----------o-----------------o
  --|Head1     |           o----------o  |SmPock1   |SmPock5   |BigPock1         |
  --|+0x74     |           |Helmet    |  |+0x194    |+0x224    |+0x104           |
  --o----------o           |+0x8      |  o----------o----------o-----------------o
  --|Head2     |           o----------o  |SmPock2   |SmPock6   |BigPock2         |
  --|+0x98     |           |Vest      |  |+0x1b8    |+0x248    |+0x128           |
  --o----------o           |+0x2c     |  o----------o----------o-----------------o
  --                       o----------o  |SmPock3   |SmPock7   |BigPock3         |
  --                                     |+0x1dc    |+0x26c    |+0x14c           |
  --                                     o----------o----------o-----------------o
  --                                     |SmPock4   |SmPock8   |BigPock4         |
  --o-----------------o                  |+0x200    |+0x290    |+0x170           |
  --|Hand1            |    o----------o  o----------o----------o-----------------o
  --|+0xbc            |    |Leg       |
  --o-----------------o    |+0x50     |
  --|Hand2            |    o----------o
  --|+0xe0            |
  --o-----------------o
  addrID[i] = firstSoldierAddr+(soldierOffset*(i-1))
  addrHelmet[i] = firstSoldierAddr+0x8+(soldierOffset*(i-1))
  addrVest[i] = firstSoldierAddr+0x2c+(soldierOffset*(i-1))
  addrLeg[i] = firstSoldierAddr+0x50+(soldierOffset*(i-1))
  addrHead1[i] = firstSoldierAddr+0x74+(soldierOffset*(i-1))
  addrHead2[i] = firstSoldierAddr+0x98+(soldierOffset*(i-1))
  addrHand1[i] = firstSoldierAddr+0xbc+(soldierOffset*(i-1))
  addrHand2[i] = firstSoldierAddr+0xe0+(soldierOffset*(i-1))
  addrBigPock1[i] = firstSoldierAddr+0x104+(soldierOffset*(i-1))
  addrBigPock2[i] = firstSoldierAddr+0x128+(soldierOffset*(i-1))
  addrBigPock3[i] = firstSoldierAddr+0x14c+(soldierOffset*(i-1))
  addrBigPock4[i] = firstSoldierAddr+0x170+(soldierOffset*(i-1))
  addrSmPock1[i] = firstSoldierAddr+0x194+(soldierOffset*(i-1))
  addrSmPock2[i] = firstSoldierAddr+0x1b8+(soldierOffset*(i-1))
  addrSmPock3[i] = firstSoldierAddr+0x1dc+(soldierOffset*(i-1))
  addrSmPock4[i] = firstSoldierAddr+0x200+(soldierOffset*(i-1))
  addrSmPock5[i] = firstSoldierAddr+0x224+(soldierOffset*(i-1))
  addrSmPock6[i] = firstSoldierAddr+0x248+(soldierOffset*(i-1))
  addrSmPock7[i] = firstSoldierAddr+0x26c+(soldierOffset*(i-1))
  addrSmPock8[i] = firstSoldierAddr+0x290+(soldierOffset*(i-1))
  addrBleeding[i] = firstSoldierAddr+0x2ce+(soldierOffset*(i-1))
  addrEnergy[i] = firstSoldierAddr+0x2cf+(soldierOffset*(i-1))
  addrMaxEnergy[i] = firstSoldierAddr+0x2d0+(soldierOffset*(i-1))
  addrName[i] = firstSoldierAddr+0x2f8+(soldierOffset*(i-1))
  addrTeam[i] = firstSoldierAddr+0x30a+(soldierOffset*(i-1))
  addrDexterity[i] = firstSoldierAddr+0x35a+(soldierOffset*(i-1))
  addrWisdom[i] = firstSoldierAddr+0x35b+(soldierOffset*(i-1))
  addrLevel[i] = firstSoldierAddr+0x37b+(soldierOffset*(i-1))
  addrHealth[i] = firstSoldierAddr+0x38e+(soldierOffset*(i-1))
  addrAgility[i] = firstSoldierAddr+0x398+(soldierOffset*(i-1))
  addrStrength[i] = firstSoldierAddr+0x39e+(soldierOffset*(i-1))
  addrLeadership[i] = firstSoldierAddr+0x3a7+(soldierOffset*(i-1))
  addrMechanical[i] = firstSoldierAddr+0x3bc+(soldierOffset*(i-1))
  addrMaxHealth[i] = firstSoldierAddr+0x3bd+(soldierOffset*(i-1))
  addrMedical[i] = firstSoldierAddr+0x668+(soldierOffset*(i-1))
  addrMarksmanship[i] = firstSoldierAddr+0x678+(soldierOffset*(i-1))
  addrExplosives[i] = firstSoldierAddr+0x679+(soldierOffset*(i-1))
  addrMorale[i] = firstSoldierAddr+0x7c4+(soldierOffset*(i-1))
  addrPersonID[i] = firstSoldierAddr+0x821+(soldierOffset*(i-1))
  addrCamouflage[i] = firstSoldierAddr+0x930+(soldierOffset*(i-1))
end

-- part of the source code file: Overhead_Types.h
--// DEFINE TEAMS
--#define OUR_TEAM					0
--#define ENEMY_TEAM				1
--#define CREATURE_TEAM				2
--#define MILITIA_TEAM				3
--#define CIV_TEAM					4
--#define LAST_TEAM					CIV_TEAM

--active soldiers needs a name and we want support only team 0 and 3
function isTeamMate(name,team)
  return name ~= nil and name ~= '' and (team == 0 or team == 3)
end

function getItem(item)
  activatedSoldierIDAddr = readPointer(activatedSoldierIDPointer)
  --print(string.format("%.8x",activatedSoldierIDAddr))
  if activatedSoldierIDAddr &gt;= addrID[1] and activatedSoldierIDAddr &lt;= addrID[totalSoldiers] then
    activatedSoldierHand1Addr = activatedSoldierIDAddr + 0xBC
    activatedSoldierHand2Addr = activatedSoldierHand1Addr + 0x24
    if has_value(exchangeItems,readSmallInteger(activatedSoldierHand1Addr)) then
      writeBytes(activatedSoldierHand1Addr, item)
      if readBytes(activatedSoldierHand1Addr) ~= 138 and readBytes(activatedSoldierHand1Addr) ~=61 then -- not HMX ort DartGun? -&gt; empty hand2
        writeBytes(activatedSoldierHand2Addr,itmClear)
      end
      if readBytes(activatedSoldierHand1Addr) == 65 then -- RocketRifle is protected by fingerprint (PersonID)
        writeBytes(activatedSoldierHand1Addr+0x1F,readBytes(activatedSoldierIDAddr+0x821))
      end
      if readBytes(activatedSoldierHand1Addr) == 36 then -- HK21 often used as grenade launcher
        writeBytes(activatedSoldierHand1Addr+0x84C, 2) -- Grenade Fire Mode
      else
        writeBytes(activatedSoldierHand1Addr+0x84C, 0) -- Single Fire Mode
      end
    end
  end
end

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>98</ID>
      <Description>"Crtl+F1: A.R. Rifle to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmARRifle)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>112</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>95</ID>
      <Description>"Crtl+F2: HK21 + Addons + Grenade"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmHK21)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>113</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>97</ID>
      <Description>"Crtl+F3: Mortar to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmMortar)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>114</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>94</ID>
      <Description>"Crtl+F4: LAW to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmLAW)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>115</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>93</ID>
      <Description>"Crtl+F5: Mustard Gas Grenade to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmMustardGasGrenade)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>116</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>96</ID>
      <Description>"Crtl+F6: HMX + Detonator to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmHMX)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>117</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>99</ID>
      <Description>"Crtl+F7: LockSmith"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmLockSmith)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>118</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>92</ID>
      <Description>"Crtl+F8: Booster to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmBooster)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>119</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>100</ID>
      <Description>"Crtl+F9: MedKit to Hand"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmMedKit)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>120</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>102</ID>
      <Description>"Crtl+F10: Tranquilizer Dart Gun"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmTranquilizerDart)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>121</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"Crtl+F11: Machete"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getItem(itmMachete)

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>122</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>101</ID>
      <Description>"Crtl+F12: Toggle NightVision / GasMask"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
activatedSoldierHead2Addr = readPointer(activatedSoldierIDPointer) + 0x98
if readBytes(activatedSoldierHead2Addr) == 213 then
  writeBytes(activatedSoldierHead2Addr, 211,0,1,0,100)--Night Vision
else
  writeBytes(activatedSoldierHead2Addr, 213,0,1,0,100)--Gas Mask
end

{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>84</ID>
      <Description>"Auto - max skills, armor &amp; energy"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
[ENABLE]

if syntaxCheck then return end
skillthread = createThread(function(Thread)
  while true do
    if Thread.Terminated then break end -- breaks loops and allows function to end
    sleep(30000) -- interval

    for i=1,totalSoldiers do
      soldierName = readString(addrName[i])
      soldierTeam = readBytes(addrTeam[i])
      soldierID = readBytes(addrID[i])
      if isTeamMate(soldierName,soldierTeam) then
        --print(soldierID, soldierName , soldierTeam)
        writeBytes(addrMaxHealth[i], 100)
        writeBytes(addrMaxEnergy[i], 100)
        writeBytes(addrMorale[i], 99)
        writeBytes(addrAgility[i], 99)
        writeBytes(addrDexterity[i], 99)
        writeBytes(addrStrength[i], 99)
        writeBytes(addrLeadership[i], 99)
        writeBytes(addrWisdom[i], 99)
        writeBytes(addrMarksmanship[i], 99)
        writeBytes(addrExplosives[i], 99)
        writeBytes(addrMechanical[i], 99)
        writeBytes(addrMedical[i], 99)
        writeBytes(addrLevel[i], 9)
        writeBytes(addrCamouflage[i], 100)

        writeBytes(addrHelmet[i], 182,0,1,0,100)--Coated Spectra Helmet
        writeBytes(addrVest[i], 169,0,1,0,100)--Coated Spectra Vest
        writeBytes(addrLeg[i], 175,0,1,0,100)--Coated Spectra Leggings
        writeBytes(addrHead1[i], 210,0,1,0,100)--Extended Ear
        if readBytes(addrHead2[i]) == 211 then
          writeBytes(addrHead2[i], 211,0,1,0,100)--Night Vision
        else
          writeBytes(addrHead2[i], 213,0,1,0,100)--Gas Mask
        end

        -- All militia gets HK21, own team gets equiped over the shortcut scripts
        if soldierName ~= nil and soldierName ~= '' and soldierTeam == 3 then
           writeBytes(addrHand1[i],36,0,1,0,100,2,20,0,101,0,100,0,0,0,0,0,241,0,54,1,50,0,147,0,100,100,100,100,0,0,0,0,126,0,0,0)
        end

      end
    end

  end
end)

[DISABLE]
skillthread.terminate()

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>90</ID>
      <Description>"Auto - reload &amp; body fix"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
[ENABLE]

if syntaxCheck then return end
inventorythread = createThread(function(Thread)
  while true do
    if Thread.Terminated then break end -- breaks loops and allows function to end
    sleep(3000) -- interval

    for i=1,totalSoldiers do
      soldierName = readString(addrName[i])
      soldierTeam = readBytes(addrTeam[i])
      if isTeamMate(soldierName,soldierTeam) then
        --print(soldierName , soldierTeam)
        itemHand1 = readSmallInteger(addrHand1[i])
        itemSmPock8 = readSmallInteger(addrSmPock8[i])

        if itemHand1 == 65 then
          writeBytes(addrHand1[i]+0x2, 1, 0, 100, 10, 20)-- Rocket Rifle Reload
        elseif itemHand1 == 41 then
          writeBytes(addrHand1[i]+0x2, 1, 0, 100)--Mortar Fix
          writeBytes(addrHand1[i]+0x10, 140,0,0,0,0,0,0,0,100)--Mortar Reload
        elseif itemHand1 == 51 or itemHand1 == 247 then
          writeBytes(addrHand1[i], 51,0,1,0,100)--LAW
        elseif itemHand1 == 36 then --HK21
          writeBytes(addrHand1[i],36,0,1,0,100,2,20,0,101,0,100,0,0,0,0,0,241,0,54,1,50,0,147,0,100,100,100,100,0,0,0,0,126,0,0,0)
        else
          -- no match
        end
        if itemSmPock8 == 0 or itemSmPock8 == 219 then
          writeBytes(addrSmPock8[i],219,0,1,0,100,0,0,0,80,195) -- always coffee money
        end

        writeBytes(addrBleeding[i],0)--Bleeding
        writeBytes(addrEnergy[i],readBytes(addrMaxEnergy[i]))--Energy
        writeBytes(addrHealth[i],readBytes(addrMaxHealth[i]))--Health
      end
    end

  end
end)

[DISABLE]
inventorythread.terminate()

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>106</ID>
      <Description>"Num -: Item 4th big pocket --"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
activatedSoldierIDAddr = readPointer(activatedSoldierIDPointer)
  if activatedSoldierIDAddr &gt;= addrID[1] and activatedSoldierIDAddr &lt;= addrID[totalSoldiers] then
    activatedSoldierBigPock4 = activatedSoldierIDAddr + 0x170
    itemNow = readSmallInteger(activatedSoldierBigPock4)
    --print(itemNow)
    if itemNow &lt;= 0 then
      itemNow = 351
    end
    writeSmallInteger(activatedSoldierBigPock4,itemNow - 1)
    writeBytes(activatedSoldierBigPock4+0x2,1,0,100)
  end


{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>109</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>105</ID>
      <Description>"Num +: Item 4th big pocket ++"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
activatedSoldierIDAddr = readPointer(activatedSoldierIDPointer)
  if activatedSoldierIDAddr &gt;= addrID[1] and activatedSoldierIDAddr &lt;= addrID[totalSoldiers] then
    activatedSoldierBigPock4 = activatedSoldierIDAddr + 0x170
    itemNow = readSmallInteger(activatedSoldierBigPock4)
    --print(itemNow)
    if itemNow &gt;= 350 then
      itemNow = -1
    end
    writeSmallInteger(activatedSoldierBigPock4,itemNow + 1)
    writeBytes(activatedSoldierBigPock4+0x2,1,0,100)
  end


{$asm}
// this write fails and the checkbox gets not checked
00000000:
nop

[DISABLE]
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>107</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>108</ID>
      <Description>"activatedMercPointer"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <GroupHeader>1</GroupHeader>
      <Address>ja2.exe+CAF428</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>104</ID>
          <Description>"activatedMercBegin"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Array of byte</VariableType>
          <ByteLength>8</ByteLength>
          <Address>ja2.exe+CAF428</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
